#include <eigen3/Eigen/Dense>
#include <vector>
#include <iostream>
#include <cmath>
#include <iomanip>
#include <fstream>
#include "../../source/spline.hpp"

const int N = 6;

int main()
{
    double h = 2;
    double maxErr = 0;
    double mark = 0;
    for (int i = 0; i < 1e3; i++)
    {
        maxErr = 0;
        mark = 0;
        h /= 1.0035;
        std::vector<double> xArr, yArr;
        xArr.resize(0);
        yArr.resize(0);
        for (size_t j = 0; j < 10 / h; j++)
        {
            xArr.push_back(j * h);
            yArr.push_back(std::exp(j*h));
        }
        CubicSpline<double, double> Spline(xArr, yArr);
        for (size_t j = 0; j < 1e4; j++)
        {
            double err = Spline.interpolate((10. / 1e4) * j) - exp((10. / 1e4) * j);
            if (err > maxErr)
                maxErr = err;
        }
        std::ofstream fout("/home/rogoda/cpp_projects/CompMath/tests/mainFiles/spline/exp_spline.txt", std::ios::app);
        fout << std::fixed << std::setprecision(16) << maxErr << " " << 10/h << std::endl;
        fout.close();
    }
    std::cout << h << std::endl;
    return 0;
}


#include <eigen3/Eigen/Dense>
#include <vector>
#include <iostream>
#include <cmath>
#include <iomanip>
#include <fstream>
#include "../../source/spline.hpp"

const int N = 6;

int main()
{
    double h = 10./5;
    double maxErr = 0;
    double mark = 0;
    std::vector<double> xArr, yArr;
    xArr.resize(0);
    yArr.resize(0);
    for (size_t j = 0; j < 6; j++)
    {
        xArr.push_back(j * h);
        yArr.push_back(std::exp(j*h));
    }
    CubicSpline<double, double> Spline(xArr, yArr);
    std::ofstream fout("/home/rogoda/cpp_projects/CompMath/tests/mainFiles/spline/exp_spline_n_5.txt", std::ios::app);
    for (size_t j = 0; j < 1e4; j++)
    {
        fout << std::fixed << std::setprecision(16) << Spline.interpolate((10./1e4) * j) << " " << (10./1e4) * j << std::endl;
    }
    fout.close();
        
    std::cout << h << std::endl;
    return 0;
}

#include <eigen3/Eigen/Dense>
#include <vector>
#include <iostream>
#include <cmath>
#include <iomanip>
#include <fstream>
#include "../../source/spline.hpp"

const int N = 6;

int main()
{
    double h = 2.5;
    double maxErr = 0;
    double mark = 0;
    for (int i = 0; i < 1e3; i++)
    {
        maxErr = 0;
        mark = 0;
        h /= 1.0037;
        std::vector<double> xArr, yArr;
        xArr.resize(0);
        yArr.resize(0);
        for (size_t j = 0; j < 10 / h + 1; j++)
        {
            xArr.push_back(j * h);
            yArr.push_back(std::exp(j*h));
        }
        CubicSpline<double, double> Spline(xArr, yArr);
        for (size_t j = 0; j < 1e4; j++)
        {
            double err = (Spline.interpolate((10. / 1e4) * j) - exp((10. / 1e4) * j)) / exp((10. / 1e4) * j);
            if (err > maxErr)
                maxErr = err;
        }
        std::ofstream fout("/home/rogoda/cpp_projects/CompMath/tests/mainFiles/spline/exp_spline_otn.txt", std::ios::app);
        fout << std::fixed << std::setprecision(16) << maxErr << " " << 10/h + 1 << std::endl;
        fout.close();
    }
    std::cout << h << std::endl;
    return 0;
}

#include <vector>
#include <iostream>
#include <cmath>
#include <iomanip>
#include <fstream>
#include "../../source/spline.hpp"

int main()
{
    std::vector<double> xArr, yArr;
    xArr = {1, 4, 7, 12, 20};
    yArr = {5, 4, 10, 18, 23};
    CubicSpline<double, double> Spline(xArr, yArr);
    std::cout << Spline.interpolate(20) << std::endl;
    return 0;
}