#include <vector>
#include <iostream>
#include <cmath>
#include <iomanip>
#include <fstream>
#include "../../source/nonlinear.hpp"

const int N = 6;

int main()
{   
    double E_true = 1.5853138613542082;
    std::size_t maxIter = 200;
    double e = 0.8;
    double m = M_PI / 4;
    double prev = m, curr;
    for (std::size_t i = 1; i < maxIter; i++)
    {
        curr = prev - (prev - e * std::sin(prev) - m) / (1 - e * std::cos(prev));
        prev = curr;
        std::ofstream fout("/home/rogoda/cpp_projects/CompMath/tests/mainFiles/nonlinear/kepler8.txt", std::ios::app);
        fout << std::fixed << std::setprecision(16) << curr - E_true  << " " << i << std::endl;
        fout.close();
    }
    
    return 0;
}


#include <vector>
#include <iostream>
#include <cmath>
#include <iomanip>
#include <fstream>
#include "../../source/nonlinear.hpp"
#include <eigen3/Eigen/Dense>

Eigen::Matrix<double, 1, 2> myfunc(const Eigen::Matrix<double, 1, 2> &pair)
{
    Eigen::Matrix<double, 1, 2> result(-pair(0, 0) * pair(0, 0) - pair(0, 1) * pair(0, 1) + 1, -std::tan(pair(0, 0)) + pair(0, 1));
    return result;
};

Eigen::Matrix<double, 1, 2> myfunc1(const Eigen::Matrix<double, 1, 2> &pair)
{
    Eigen::Matrix<double, 1, 2> result(pair(0, 0) * pair(0, 0) + pair(0, 1) * pair(0, 1) - 1 + pair(0, 0), std::tan(pair(0, 0)));
    return result;
};

Eigen::Matrix<double, 1, 2> myfunc2(const Eigen::Matrix<double, 1, 2> &pair)
{
    Eigen::Matrix<double, 1, 2> result(pair(0, 0) * pair(0, 0) + pair(0, 1) * pair(0, 1) - 1, -std::tan(pair(0, 0)) + pair(0, 1));
    return result;
};

int main()
{
    // два решения: одно решение в первой четверти, а второе - в третьей четверти координатной плоскости
    const Eigen::Matrix<double, 1, 2> initial1(1. / 2, 1. / 2), initial2(-1. / 2, -1. / 2);
    Eigen::Matrix<double, 1, 2> answer1 = solve<decltype(myfunc), double>(myfunc, -1. / 4, initial1, 80);
    std::cout << std::setprecision(16) << answer1 << " " << std::endl;
    Eigen::Matrix<double, 1, 2> answer2 = solve<decltype(myfunc), double>(myfunc, -1. / 4., initial2, 80);
    std::cout << std::setprecision(16) << answer2 << " " << std::endl;
    Eigen::Matrix<double, 1, 2> answer5 = solve<decltype(myfunc), double>(myfunc2, -1. / 4, initial1, 80);
    std::cout << std::setprecision(16) << answer5 << " " << std::endl;
    Eigen::Matrix<double, 1, 2> answer6 = solve<decltype(myfunc), double>(myfunc2, -1. / 4, initial2, 80);
    std::cout << std::setprecision(16) << answer6 << " " << std::endl;
    return 0;
}